(page "index.html"
			(:require [cljsjs.papaparse]
								[rollcall.data :as data]))

(defn papa
	[cell url]
	(.parse js/Papa url #js {:download true
													 :header true
													 :skipEmptyLines true
													 :complete (fn [results]
																			 (let [r (js->clj results :keywordize-keys true)
																						 data (:data r)]
																				 (reset! cell data)))}))

(defn percent [n] (str n "%"))

(defc members [])
(defc journals [])
(defc= dates data/dates)
(defc roll-call [])

(papa members "members.csv")
(papa journals "journals.csv")
;;(papa dates "dates.csv") removed because replaced with namespaced presorted data
(papa roll-call "roll_call.csv")

(defc= id-attendance
	(group-by (fn [d] (:member_id d)) roll-call))

(defc= members-with-attendance
	(mapv (fn [member]
					(let [session-dates (to-array (mapv :date dates))
								dates-attended (sort (mapv :date (get id-attendance (:id member))))
								date-earliest (first dates-attended)
								date-latest (last dates-attended)
								first-session-index (.indexOf session-dates date-earliest)
								last-session-index (.indexOf session-dates date-latest)
								term-length (inc (- last-session-index first-session-index))
								presence-fraction (/ (count dates-attended) term-length)
								presence (js/Math.round (* presence-fraction 100))]
						(merge member {:dates-attended dates-attended
													 :date-earliest date-earliest
													 :date-latest date-latest
													 :term-length term-length
													 :presence presence})))
				members))

(defelem toolbar-item
	[_ children]
	(div :class "toolbar-item"
			 children))

(defelem spacer
	[_ _]
	(div :class "spacer"))

(html
 (head
	(link :href "https://fonts.googleapis.com/css?family=Roboto:400,300,700" :rel "stylesheet")
	(link :href "css/main.css" :rel "stylesheet"))
 (body
	(let [current-view (cell :index)
				selected-member (cell nil)]
		(div :class "panel fill"
				 (div :class "toolbar"
							(h1 :class "toolbar-item" "Rollcall")
							(spacer)
							(toolbar-item "About our data")
							(toolbar-item "About this site")
							(toolbar-item (a :href "http://torchapps.github.io" "See more apps by Torch")))
				 (div :class "panel-content split-view"
							(ul :class "minor view scrollable list-view"
									(loop-tpl :bindings [member members-with-attendance]
														(let [id (cell= (:id member))
																	selected-id (cell= (:id selected-member))
																	full-name (cell= (:full_name member))]
															(li :class (cell= {:testing true
																								 :selected (= selected-id id)})
																	:click #(reset! selected-member @member)
																	(div :class "name" full-name)
																	(div (cell= (percent (:presence member))))))))
							(div :class "major view"
									 (let [attendance (cell= (count (:dates-attended selected-member)))
												 term-length (cell= (:term-length selected-member))
												 member-name (cell= (:full_name selected-member))]
										 (div :class (cell= {:padded true :hidden (nil? selected-member)})
													(h1 member-name)
													(h2 (cell= (percent (:presence selected-member))))
													(div
													 (text "~{attendance} sessions present in the roll call"))
													(div
													 (text "~{term-length} days in term as of November 24, 2012"))))))))))
