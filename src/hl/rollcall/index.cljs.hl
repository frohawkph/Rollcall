(page "index.html"
			(:require [cljsjs.papaparse]
								[rollcall.data :as data]
								[goog.math :as math]
								[cljs-time.core :as t]
								[cljs-time.format :as tf]))

(defn papa
	[cell url]
	(.parse js/Papa url #js {:download true
													 :header true
													 :skipEmptyLines true
													 :complete (fn [results]
																			 (let [r (js->clj results :keywordize-keys true)
																						 data (:data r)]
																				 (reset! cell data)))}))

(def date-formatter (tf/formatters :date))

(defn percent [n] (str n "%"))

(defc members [])
(defc journals [])
(defc= dates data/dates)
(defc roll-call [])

(defc= dates-by-year
	(group-by (fn [date] (t/year date))
						(mapv #(tf/parse date-formatter (:date %))
									dates)))

(papa members "members.csv")
(papa journals "journals.csv")
(papa roll-call "roll_call.csv")

(defc= id-attendance
	(group-by (fn [d] (:member_id d)) roll-call))

(defc= members-with-attendance
	(mapv (fn [member]
					(let [session-dates (to-array (mapv :date dates))
								dates-attended (sort (mapv :date (get id-attendance (:id member))))
								date-earliest (first dates-attended)
								date-latest (last dates-attended)
								first-session-index (.indexOf session-dates date-earliest)
								last-session-index (.indexOf session-dates date-latest)
								term-length (inc (- last-session-index first-session-index))
								presence-fraction (/ (count dates-attended) term-length)
								presence (js/Math.round (* presence-fraction 100))]
						(merge member {:dates-attended dates-attended
													 :date-earliest date-earliest
													 :date-latest date-latest
													 :term-length term-length
													 :presence presence})))
				members))

(defelem toolbar-item
	[_ children]
	(div :class "toolbar-item"
			 children))

(defelem spacer
	[_ _]
	(div :class "spacer"))

(defelem calendar
	[{:keys [month year highlight]} _]
	(div :class "calendar"
			 (div :class "week week-header"
						(loop-tpl :bindings [week-header (cell [:M :T :W :T :F :S :Su])]
											(div :class "day"
													 (cell= (name week-header)))))
			 (let [first-day (cell= (t/date-time year month))
						 first-day-of-week (cell= (t/day-of-week first-day))
						 number-of-days (cell= (t/number-of-days-in-the-month year month))
						 weeks (cell= (->> (inc number-of-days)
															 (range 1)
															 (map #(t/date-time year month %))
															 (partition-by (fn [date-time]
																							 (let [adjusted-day (- (+ first-day-of-week (t/day date-time)) 2)
																										 week-number (js/Math.floor (/ adjusted-day 7))]
																								 week-number)))))]
				 (loop-tpl :bindings [week weeks]
									 (let [first-week? (cell= (some (fn [day]
																										(= 1 (t/day day))) week))]
										 (div :class (cell= {:week true :first-week first-week?})
													(loop-tpl :bindings [day week]
																		(let [day-number (cell= (t/day day))]
																			(div :class "day" day-number)))))))))

(html
 (head
	(link :href "https://fonts.googleapis.com/css?family=Raleway:400,300,700" :rel "stylesheet")
	(link :href "css/main.css" :rel "stylesheet"))
 (body
	(let [current-view (cell :index)
				selected-member (cell nil)]
		(div :class "panel fill"
				 (div :class "toolbar"
							(h1 :class "toolbar-item" "Rollcall")
							(spacer)
							(toolbar-item "About our data")
							(toolbar-item "About this site")
							(toolbar-item (a :href "http://torchapps.github.io" "See more apps by Torch")))
				 (div :class "panel-content split-view"
							(ul :class "minor view scrollable list-view"
									(loop-tpl :bindings [member members-with-attendance]
														(let [id (cell= (:id member))
																	selected-id (cell= (:id selected-member))
																	full-name (cell= (:full_name member))]
															(li :class (cell= {:testing true
																								 :selected (= selected-id id)})
																	:click #(reset! selected-member @member)
																	(div full-name)
																	(spacer)
																	(div (cell= (percent (:presence member))))))))
							(div :class "major view scrollable"
									 (let [dates-attended (cell= (mapv #(tf/parse date-formatter %)
																										 (:dates-attended selected-member)))
												 presence (cell= (percent (:presence selected-member)))
												 attendance (cell= (count dates-attended))
												 term-length (cell= (:term-length selected-member))
												 member-name (cell= (:full_name selected-member))]
										 (div :class (cell= {:padded true :hidden (nil? selected-member)})
													(h1 :class "member-name" member-name)
													(dl :class "info"
															(dd (text "~{presence}"))
															(dt "attendance")
															(dd (text "~{attendance} of ~{term-length}"))
															(dt "sessions present in the roll call"))
													(div :class "dates-attended sessions"
															 (loop-tpl :bindings [[year year-dates] dates-by-year]
																				 (div :class "year"
																							(h3 :class "year-header" year)
																							(div :class "dates"
																									 (loop-tpl :bindings [date year-dates]
																														 (let [formatted-date (cell= (tf/unparse (tf/formatter "MMM d") date))
																																	 was-present? (cell= (some #(t/= % date) dates-attended))]
																															 (div :class (cell= {:date true :present was-present?}) formatted-date)))))
																				 #_(let [dt (cell= (tf/parse date-formatter (:date date)))
																								 formatted-date (cell= (if dt (tf/unparse (tf/formatter "MMM d, YYYY") dt)))
																								 was-present? (cell= (some #(t/= % dt) dates-attended))]
																						 (li :class (cell= {:present was-present?})
																								 formatted-date))))))))))))
