(page "index.html"
			(:require [cljsjs.papaparse]
								[rollcall.data :as data]
								[goog.math :as math]
								[cljs-time.core :as t]
								[cljs-time.format :as tf]))

(enable-console-print!)

#_(.addEventListener js/window "resize" (fn [] (.log js/console "resized")))

(defn papa
	[cell url]
	(.parse js/Papa url #js {:download true
													 :header true
													 :skipEmptyLines true
													 :complete (fn [results]
																			 (let [r (js->clj results :keywordize-keys true)
																						 data (:data r)]
																				 (reset! cell data)))}))

(def date-formatter (tf/formatters :date))

(defn percent [n] (str n "%"))

(defc selected-date nil)
(defc selected-member nil)
(defc selected-sort :full_name)

(defc members [])
(defc journals [])
(defc= dates data/dates)
(defc roll-call [])

(defc= dates-by-year
	(group-by t/year
						(mapv #(tf/parse date-formatter (:date %))
									dates)))

(papa members "members.csv")
(papa journals "journals.csv")
(papa roll-call "roll_call.csv")

(defc= id-attendance
	(group-by :member_id roll-call))

(defc= members-with-attendance
	(mapv (fn [member]
					(let [session-dates (to-array (mapv :date dates))
								dates-attended (sort (mapv :date (get id-attendance (:id member))))
								date-earliest (first dates-attended)
								date-latest (last dates-attended)
								first-session-index (.indexOf session-dates date-earliest)
								last-session-index (.indexOf session-dates date-latest)
								term-length (inc (- last-session-index first-session-index))
								presence-fraction (/ (count dates-attended) term-length)
								presence (js/Math.round (* presence-fraction 100))]
						(merge member {:dates-attended dates-attended
													 :date-earliest date-earliest
													 :date-latest date-latest
													 :term-length term-length
													 :presence presence})))
				members))

(defc= id-member
	(group-by :id members-with-attendance))

(defc= date-members
	(group-by (fn [d] (:date d))
						(mapv (fn [r]
										(let [id (:member_id r)
													member (first (get id-member id))]
											(merge r {:member member}))) roll-call)))


(defelem toolbar-item
	[{:keys [click class]} children]
	(div :class (cell= (merge class {:toolbar-item true}))
			 :click click
			 children))

(defelem spacer
	[_ _]
	(div :class "spacer"))

(defelem dialog
	[{:keys [open?]} dialog-contents]
	(div :class (cell= {:dialog true
											:anim-hidden (not open?)
											:curtained true})
			 :click #(reset! open? nil)
			 (div :class (cell= {:dialog-contents true
													 :panel true
													 :anim-hidden (not open?)})
						:click #(.stopImmediatePropagation %)
						dialog-contents)))

(html
 (head
	(link :href "https://fonts.googleapis.com/css?family=Raleway:400,300,700" :rel "stylesheet")
	(link :href "css/main.css" :rel "stylesheet"))

 (body

	(let [current-view (cell :index)]
		(div :class "panel fill"
				 (div :class "toolbar main"
							(h1 :class "toolbar-item" "Rollcall")
							(spacer)
							(toolbar-item "About our data")
							(toolbar-item "About this site")
							(toolbar-item (a :href "http://torchapps.github.io" "See more apps by Torch")))
				 (div :class "panel-content split-view"
							(div :class "minor view panel"
									 (ul :class "panel-content scrollable list-view"
											 (let [members (cell= (sort-by selected-sort members-with-attendance))]
												 (loop-tpl :bindings [member members]
																	 (let [id (cell= (:id member))
																				 selected-id (cell= (:id selected-member))
																				 full-name (cell= (:full_name member))]
																		 (li :class (cell= {:testing true
																												:selected (= selected-id id)})
																				 :click #(reset! selected-member @member)
																				 (div full-name)
																				 (spacer)
																				 (div (cell= (percent (:presence member)))))))))
									 (div :class "toolbar sort-toolbar"
												(toolbar-item :click #(reset! selected-sort :full_name)
																			:class (cell= {:selected (= selected-sort :full_name)})
																			"Alphabetical")
												(toolbar-item :click #(reset! selected-sort :presence)
																			:class (cell= {:selected (= selected-sort :presence)})
																			"Attendance")))
							(div :class "major view scrollable"
									 (let [dates-attended (cell= (mapv #(tf/parse date-formatter %)
																										 (:dates-attended selected-member)))
												 presence (cell= (percent (:presence selected-member)))
												 attendance (cell= (count dates-attended))
												 term-length (cell= (:term-length selected-member))
												 member-name (cell= (:full_name selected-member))]
										 (div :class (cell= {:padded true :hidden (nil? selected-member)})
													(header
													 (h1 :class "member-name" member-name)
													 (div :class "info-group"
																(div :class "info"
																		 (div :class "value" (text "~{presence}"))
																		 (div :class "desc" "attendance"))
																(div :class "info"
																		 (div :class "value" (text "~{attendance} of ~{term-length}"))
																		 (div :class "desc" "sessions present in the roll call"))))
													(div :class "dates-attended sessions"
															 (loop-tpl :bindings [[year year-dates] dates-by-year]
																				 (div :class "year"
																							(h3 :class "year-header" year)
																							(div :class "dates"
																									 (loop-tpl :bindings [date year-dates]
																														 (let [formatted-date (cell= (tf/unparse (tf/formatter "MMM d") date))
																																	 was-present? (cell= (some #(t/= % date) dates-attended))]
																															 (div :class (cell= {:date true :present was-present?})
																																		:click #(reset! selected-date @date)
																																		formatted-date)))))))))))))

	(let [title (cell= (if selected-date
											 (tf/unparse (tf/formatter "MMM d, YYYY") selected-date)))
				attendees (cell= (if selected-date
													 (mapv :member
																 (get date-members (tf/unparse date-formatter selected-date)))
													 (range 400)))] ;; this is a weird workaround. Without this, only N li's will be clickable, where N is the length of whatever collection this is.
		(dialog :open? selected-date
						(div :class "toolbar"
								 (h1 :class "toolbar-item" title))
						(ul :class "panel-content scrollable list-view"
								(loop-tpl :bindings [attendee attendees]
													(let [attendee-name (cell= (:full_name attendee))]
														(li :click #(do
																					(reset! selected-member @attendee)
																					(reset! selected-date nil))
																attendee-name))))))))
